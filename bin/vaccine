#!/bin/sh

help() {
  echo 'vaccine [options]

Options:
        --app <app>       # Your app or lib name.
        --src <dir>       # The directory for your sources (default: src).
        --lib <dir>       # The directory for your libraries (default: lib).
        --global <name>   # The global variable name (default: app name)
        --deps <d1,...>   # Comma separated lib/app dependencies.
        --dep <d1>        # Single dependency for lib/app.
'
  exit 0
}

if test "X$vaccine_bin_dir" = X
then
  SOURCE="$0"
  DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do
    SOURCE="$(readlink "$SOURCE")"
    [ "$(echo "$SOURCE" | cut -c 1)" != '/' ] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  vaccine_bin_dir=$DIR
  vaccine_src_dir="$(cd "$DIR/../src" && pwd)"
  export vaccine_bin_dir
  export vaccine_src_dir
fi

vaccine_src=$vaccine_src_dir/vaccine.js
standalone_server_src=$vaccine_src_dir/dev_server_standalone.js
build_src=$vaccine_src_dir/build

# Variables
source_dir=src
library_dir=lib

vars_list='app_name source_dir library_dir global_var dep_name dep_names'


fail() {
  echo $1 >&2
  exit 1
}

while test $# -gt 0
do
  case $1 in
    --help | -h) help ;;
    --app) app_name=$2 ;;
    --src) dir_or_file=$2; source_dir=$2 ;;
    --lib) library_dir=$2 ;;
    --global) global_var=$2 ;;
    --deps | --dep) dep_names_raw=$2 ;;
    *) fail "Unrecognized option: $1" ;;
  esac
  if test "X$1" = "X--write-exports"
  then
    shift 1
  else
    shift 2
  fi
done


test "X$app_name" = X && fail 'Must provide the name of app (vaccine --app [name])'

if test "X$dep_names_raw" != X
then
  has_deps=true
  dep_name=$dep_names_raw
  dep_names=$(echo "$dep_names_raw" | sed -e "s/,/\",\"/g" \
                                          -e "s/^/\"/" -e "s/$/\"/")
  echo "$dep_names" | grep -q ',' && multi_deps=true
fi

test "X$global_var" = X && global_var=$app_name


unindent() {
  sed 's/^  //'
}

remove_sections() {
  sed "/vvvvv $1$/,/\^\^\^\^\^ $1$/d"
}

choose_section() {
  sed -e "1,/vvvvv $1$/d" -e "/\^\^\^\^\^ $1$/,\$d"
}

insert_section() {
  file=$2
  sed -e "/----- $1$/r $file" -e "/----- $1$/d"
}

replace_vars() {
  sed_string=''
  for var in $vars_list
  do
    eval value=\$$var
    name=$(echo $var | tr '[a-z]' '[A-Z]')
    sed_string="$sed_string -e 's#{{{ $name }}}#$value#g'"
  done
  eval sed $sed_string
}

start() {
  cat $1 | replace_vars
}

clean() {
  sed -e '/vvvvv/d' -e '/\^\^\^\^\^/d' -e '/-----/d'
}

set_dependencies() {
  if test "X$has_deps" = X
  then
    remove_sections MULTIPLE_DEPS | remove_sections SINGLE_DEP
  else
    if test "X$multi_deps" = X
    then
      remove_sections NO_DEPS | remove_sections MULTIPLE_DEPS
    else
      remove_sections NO_DEPS | remove_sections SINGLE_DEP
    fi
  fi
}

start_vaccine() {
  start $vaccine_src | set_dependencies
}

vaccine_intermediate() {
  start_vaccine | unindent | unindent
}

complex_intermediate() {
  vaccine_intermediate | complex
}

simple_intermediate() {
  vaccine_intermediate | simple
}

complex() {
  remove_sections SIMPLE
}

simple() {
  remove_sections COMPLEX
}


# Vaccines

complex_intermediate | clean > vaccine.js
simple_intermediate | clean > vaccine_simple.js
complex_intermediate | remove_sections AMD | clean > vaccine_no_amd.js
simple_intermediate | remove_sections AMD | clean > vaccine_simple_no_amd.js


# Server

start $standalone_server_src | clean > dev_server_standalone_node.js


# Builds

start $build_src | remove_sections NODE | clean > build
chmod +x build

start $build_src | remove_sections PRE_WRAPPED | clean > build_node
chmod +x build_node
