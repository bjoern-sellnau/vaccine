#!/usr/bin/env node

var fs = require('fs'),
    vaccine = require('..');

var fail = function(message, num) {
  console.error(message);
  process.exit(num || 1);
};

var description = "Develop JavaScript libraries in CommonJS or AMD";

var commands = {
  help: {
    desc: "Display this help",
  },
  build: {
    args: '[file name]',
    desc: "Build the output file from the sources and shim",
  },
  targets: {
    args: '[target names]*',
    desc: "Construct the targets listed or in component.json",
  },
  server: {
    desc: "Run a development server (same as dev_server.js)",
  },
  create: {
    args: '<name> [args]*',
    desc: "Create a skeleton library (args are unused by default)",
  },
  template: {
    desc: "Set ~/.vaccine/template to the default library template",
  },
  "component.json": {
    desc: "Create an example component.json",
  },
  "vaccine.json": {
    desc: "Create an example vaccine.json",
  },
};
var commandNames = Object.keys(commands);

var commandHelp = function(command) {
  var args = commands[command].args || '';
  console.log('$ vaccine ' + command + ' ' + args);
  console.log('               # ' + commands[command].desc);
};

var help = function() {
  commandNames.forEach(function(c) {
    commandHelp(c);
  });
};

var run = function() {
  var command = process.argv[2];
  if (!command || command === '-h' || command === '--help') command = 'help';

  var matching = commandNames.filter(function(c) {
    return command === c.slice(0, command.length);
  });
  if (!matching.length) fail("Unknown command: " + command);
  if (matching.length > 1) {
    var didYouMean = "Did you mean any of: " + matching.join(', ');
    fail("Ambiguous command: " + command + "\n" + didYouMean);
  }
  command = matching[0];
  var definition = commands[command];
  var defArgs = definition.args;
  var args = process.argv.slice(3);
  var err;
  if (defArgs) {
    var multi = defArgs[defArgs.length - 1] === '*'
    var optional = defArgs[0] === '[';
    if (!args.length && !optional)
      err = "Missing required arguments";
    if (args.length > 1 && !multi)
      err = "Too many arguments given";
  } else {
    if (args.length && !defArgs)
      err = "Unexpected arguments: " + args.join(' ');
  }
  if (err) {
    console.error(err);
    commandHelp(command);
    process.exit(1);
  }
  if (command === 'help') help();
  else vaccine[command](args);
};

run();
