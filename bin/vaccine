#!/bin/sh

help() {
  echo "vaccine [options]

Options:
        --name <name>     # Your library's name.
        --src <dir>       # The directory for your sources (default: src).
        --lib <dir>       # The directory for your libraries (default: lib).
        --global <name>   # The global variable name (default: --name)
        --deps <d1,...>   # Comma separated dependencies.
        --dep <d1>        # Single dependency.
"
  exit 0
}

fail() {
  echo $1 >&2
  exit 1
}


if test "X$vaccine_bin_dir" = X
then
  SOURCE="$0"
  DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do
    SOURCE="$(readlink "$SOURCE")"
    [ "$(echo "$SOURCE" | cut -c 1)" != '/' ] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  vaccine_bin_dir=$DIR
  vaccine_src_dir="$(cd "$DIR/../src" && pwd)"
  export vaccine_bin_dir
  export vaccine_src_dir
fi

vaccine_src=$vaccine_src_dir/vaccine.js
standalone_server_src=$vaccine_src_dir/dev_server_standalone.js
build_src=$vaccine_src_dir/build


# Variables
SOURCE_DIR=src
LIBRARY_DIR=lib
DIR_LEVELS=1

vars_list='LIB_NAME SOURCE_DIR LIBRARY_DIR GLOBAL_VAR DEP_NAME DEP_NAMES'

# Conditionals
multi_DIRS=false
supports=amd,window
AMD=true
WINDOW=true
USE_STRICT=false
no_DEPS=true
one_DEPS=false
multi_DEPS=false
multi_DEPS_and_AMD=false
MODULE_EXPORTS=true
RETURN_EXPORTS=false
EXPORTS=true
DEBUG=false

conditionals='multi_DIRS AMD WINDOW NODE USE_STRICT no_DEPS one_DEPS multi_DEPS'
conditionals="$conditionals multi_DEPS_and_AMD MODULE_EXPORTS RETURN_EXPORTS"
conditionals="$conditionals EXPORTS DEBUG"

# Switches
DEPS=0

switches='DEPS'


while test $# -gt 0
do
  case $1 in
    --help | -h) help ;;
    --name) LIB_NAME=$2; shift ;;
    --dir-levels) DIR_LEVELS=$2; shift ;;
    --support | --supports) supports=$2; shift ;;
    --debug) DEBUG=true; supports=''; ;;
    --export | --exports) exports=$2; shift ;;
    --use-strict) USE_STRICT=true; ;;
    --node) NODE=true; ;;
    --src) SOURCE_DIR=$2; shift ;;
    --lib) LIBRARY_DIR=$2; shift ;;
    --global) GLOBAL_VAR=$2; shift ;;
    --deps | --dep) dep_names_raw=$2; shift ;;
    *) fail "Unrecognized option: $1" ;;
  esac
  shift
done


test "X$LIB_NAME" = X && fail 'Must provide the name (vaccine --name [name])'

test $DIR_LEVELS -gt 1 && multi_DIRS=true

if test "X$dep_names_raw" != X
then
  no_DEPS=false
  DEP_NAME=$dep_names_raw
  DEP_NAMES=$(echo "$dep_names_raw" | sed -e "s/,/\",\"/g" \
                                          -e "s/^/\"/" -e "s/$/\"/")
  DEPS=$(echo "$dep_names_raw" | sed 's/[^,]//g' | wc -c)
  if test $DEPS -gt 1
  then
    DEPS='>'
    multi_DEPS=true
  else
    one_DEPS=true
  fi
fi

if test "X$exports" != X
then
  MODULE_EXPORTS=false
  EXPORTS=false
  RETURN_EXPORTS=false
  if echo "$exports" | grep -i -q 'exports'
  then
    EXPORTS=true
  else
    EXPORTS=false
  fi
  if echo "$exports" | grep -i -q 'module'
  then
    MODULE_EXPORTS=true
    EXPORTS=true
  else
    MODULE_EXPORTS=false
  fi
  if echo "$exports" | grep -i -q 'return'
  then
    RETURN_EXPORTS=true
  else
    RETURN_EXPORTS=false
  fi
fi

if echo "$supports" | grep -i -q 'amd'
then
  AMD=true
else
  AMD=false
fi
if echo "$supports" | grep -i -q 'window'
then
  WINDOW=true
else
  WINDOW=false
fi

test "X$GLOBAL_VAR" = X && GLOBAL_VAR=$LIB_NAME


switch() {
  awk "/===== .* $1/{p=1} /===== $2 $1/{p=0} /===== \/ $1/{p=0} p == 0 {print}"
}

conditional() {
  if test "X$2" = 'Xtrue'
  then
    sed "/::::: $1$/,/\/\/\/\/\/ $1$/d" | sed "/!!!!! $1$/,/\/\/\/\/\/ $1$/d" |
        sed -e "s/@@ $1 ?? \(.*\) :: .* @@/\1/" \
            -e "s/@@ $1 ?? \(.*\) @@/\1/" \
            -e "s/@@ $1 !! .* @@//"
  else
    awk "/\?\?\?\?\? $1/{p=1} /\/\/\/\/\/ $1/{p=0} /::::: $1/{p=0} p == 0 {print}" |
        sed -e "s/@@ $1 ?? .* :: \(.*\) @@/\1/" \
            -e "s/@@ $1 !! \(.*\) @@/\1/" \
            -e "s/@@ $1 ?? .* @@//"
  fi
}

clean() {
  sed -e '/?????/d' -e '/!!!!!/d' -e '/:::::/d' -e '/\/\/\/\/\//d' -e '/=====/d'
}

replace_vars() {
  sed_string=''
  for var in $vars_list
  do
    eval value=\$$var
    sed_string="$sed_string -e 's#\\$\\$ $var \\$\\\$#$value#g'"
  done
  eval sed $sed_string
}

pick_conditionals() {
  cond_string=''
  for cond in $conditionals
  do
    cond_string="$cond_string | conditional $cond \$$cond"
  done
  cond_string=$(echo "$cond_string" | cut -c 4-)
  eval $cond_string
}

pick_switches() {
  switch_string=''
  for sw in $switches
  do
    switch_string="$switch_string | switch $sw \$$sw"
  done
  switch_string=$(echo "$switch_string" | cut -c 4-)
  eval $switch_string
}

configure() {
  cat $1 | replace_vars | sed 's/^    //' |
      pick_conditionals | pick_switches | clean
}


# Vaccines

configure $vaccine_src > vaccine.js


# Server

cat $standalone_server_src | replace_vars | clean > dev_server_standalone_node.js


# Builds

configure $build_src > build
chmod +x build
