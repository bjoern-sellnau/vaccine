#!/usr/bin/env node

var fs = require('fs'),
    vaccine = require('..');

var usage = 'Generate shims to make CommonJS or AMD work in the browser.\n' +
            'Usage: vaccine --name <name> --main <main> [options]\n\n' +
            '[m] means it is intended to be called multiple times.';

var optimist = require('optimist')
    .usage(usage)
    .wrap(80)

    .describe('name', "Your library's name.")
    .describe('main', "Your library's entry file.")
    .describe('format', 'The format your library is writen in: "commonjs", ' +
                        '"amd", or "umd"')

    .describe('require', 'The way to require external modules. Choices are: ' +
                         "'absolute', 'single' (e. g. `./module`), " +
                         "'full'")
    .describe('dep', "[m] Your library's dependencies.")
    .describe('support', "[m] Choose between supporting AMD, attaching to " +
                         "'window', or both (default both).")
    .describe('export', "[m] How a module provides exports. Options are " +
                        "'return', 'module' (for module.exports), and " +
                        "'exports'.")
    .describe('target', "[m] Which files to configure. Options are: " +
                         "vaccine.js, umd.js, build.sh, Makefile, " +
                         "vaccine_dev.js, and dev_server.js. vaccine.js and " +
                         "build.sh are default.")
    .describe('define', 'Choose how the define wrap works in AMD. Only choice ' +
                        "is 'optional_id' or not")

    .describe('stdout', 'Write to stdout instead of to files.')
    .describe('debug', 'Add debugging logs for development.')
    .describe('performance', 'Measure the load-time performance of your library.')
    .describe('src', 'The directory your sources are under. Derived from --main.')
    .describe('global', 'The global variable name (defaults to --name).')
    .describe('use-strict', 'Enable strict mode in built file.')
    .describe('lib', 'The directory for your libraries.')

    .alias('name', 'n')
    .alias('main', 'm')
    .alias('format', 'f')
    .alias('dep', 'd')
    .alias('define', 'def')
    .alias('support', 's')
    .alias('export', 'e')
    .alias('require', 'r')
    .alias('target', 't')
    .alias('stdout', 'c')
    .alias('help', 'h')

    .demand('name')
    .demand('main')
    .demand('format')

    .boolean('stdout')
    .boolean('debug')
    .boolean('performance')
    .boolean('use-strict')

    .default('lib', 'lib')
;


var argv = optimist.argv;

if (argv.h) {
  optimist.showHelp();
  process.exit(0);
}

argv.use_strict = argv['use-strict'];

var ensureArray = function(key) {
  if (typeof argv[key] !== 'undefined' && !Array.isArray(argv[key])) {
    return [argv[key]];
  } else {
    return argv[key];
  }
}
argv.dependencies = ensureArray('dep');
argv.targets = ensureArray('target');
argv.supports = ensureArray('support');
argv.exports = ensureArray('export');
argv.require = ensureArray('require');
argv.define = ensureArray('define');

vaccine.loadFiles();
var problems = vaccine.validateOptions(argv);
problems.forEach(function(problem) {
  problem.fix(argv);
});

var targets = vaccine(argv);

if (argv.stdout) {
  targets.forEach(function(target) {
    if (targets.length > 1) {
      console.log('--------------- ' + target.name + ' ---------------');
    }
    console.log(target.compiled);
  });
} else {
  targets.forEach(function(target) {
    var name = target.name;
    if (name === 'Makefile') {
      if (fs.existsSync('Makefile')) name = 'Makefile.example';
    }
    fs.writeFile(name, target.compiled, 'utf8', function(err) {
      if (err) throw err;
      if (name === 'build.sh') {
        fs.chmod('build.sh', '755', function(err) { if (err) throw err; });
      }
      console.log('Completed... ' + name);
    });
  });
}
