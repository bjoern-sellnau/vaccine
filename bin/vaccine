#!/bin/sh

help() {
  echo "vaccine [options]

Options:
        --name <name>     # Your library's name.
        --src <dir>       # The directory for your sources (default: src).
        --lib <dir>       # The directory for your libraries (default: lib).
        --global <name>   # The global variable name (default: --name)
        --deps <d1,...>   # Comma separated dependencies.
        --dep <d1>        # Single dependency.
"
  exit 0
}

if test "X$vaccine_bin_dir" = X
then
  SOURCE="$0"
  DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do
    SOURCE="$(readlink "$SOURCE")"
    [ "$(echo "$SOURCE" | cut -c 1)" != '/' ] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  vaccine_bin_dir=$DIR
  vaccine_src_dir="$(cd "$DIR/../src" && pwd)"
  export vaccine_bin_dir
  export vaccine_src_dir
fi

vaccine_src=$vaccine_src_dir/vaccine.js
standalone_server_src=$vaccine_src_dir/dev_server_standalone.js
build_src=$vaccine_src_dir/build

# Variables
SOURCE_DIR=src
LIBRARY_DIR=lib
DIR_LEVELS=1
EXPORTS=amd,window
DEPS=0

vars_list='LIB_NAME SOURCE_DIR LIBRARY_DIR GLOBAL_VAR DEP_NAME DEP_NAMES'


# Conditionals
COMPLEX=false
AMD=false
NO_DEPS=true
ONE_DEP=false
MULTI_DEPS=false

conditionals='COMPLEX AMD NO_DEPS ONE_DEP MULTI_DEPS NODE'


fail() {
  echo $1 >&2
  exit 1
}

while test $# -gt 0
do
  case $1 in
    --help | -h) help ;;
    --name) LIB_NAME=$2; shift ;;
    --dir-levels) DIR_LEVELS=$2; shift ;;
    --export | --exports) exports_raw=$2; shift ;;
    --amd) AMD=true; ;;
    --node) NODE=true; ;;
    --src) SOURCE_DIR=$2; shift ;;
    --lib) LIBRARY_DIR=$2; shift ;;
    --global) GLOBAL_VAR=$2; shift ;;
    --deps | --dep) dep_names_raw=$2; shift ;;
    *) fail "Unrecognized option: $1" ;;
  esac
  shift
done


test "X$LIB_NAME" = X && fail 'Must provide the name (vaccine --name [name])'

test $DIR_LEVELS -gt 1 && COMPLEX=true

if test "X$dep_names_raw" != X
then
  NO_DEPS=false
  DEP_NAME=$dep_names_raw
  DEP_NAMES=$(echo "$dep_names_raw" | sed -e "s/,/\",\"/g" \
                                          -e "s/^/\"/" -e "s/$/\"/")
  DEPS=$(echo "$dep_names_raw" | sed 's/[^,]//g' | wc -c)
  if test $DEPS -gt 1
  then
    MULTI_DEPS=true
  else
    ONE_DEP=true
  fi
fi

if test "X$exports_raw" != X
then
  if echo "$exports_raw" | grep -i -q 'amd'
  then
    if echo "$exports_raw" | grep -i -q 'window'
    then
      EXPORTS=amd,window
    else
      EXPORTS=amd
    fi
  else
    EXPORTS=window
  fi
fi

test "X$GLOBAL_VAR" = X && GLOBAL_VAR=$LIB_NAME


conditional() {
  if test "X$2" = 'Xtrue'
  then
    sed "/::::: $1$/,/##### $1$/d" | sed "/!!!!! $1$/,/##### $1$/d"
  else
    awk "/\?\?\?\?\? $1/{f=1} /##### $1/{f=0} /::::: $1/{f=0} f == 0 {print}"
  fi
}

clean() {
  sed -e '/?????/d' -e '/!!!!!/d' -e '/:::::/d' -e '/#####/d'
}

replace_vars() {
  sed_string=''
  for var in $vars_list
  do
    eval value=\$$var
    sed_string="$sed_string -e 's#{{{ $var }}}#$value#g'"
  done
  eval sed $sed_string
}

set_conditionals() {
  cond_string=''
  for cond in $conditionals
  do
    cond_string="$cond_string | conditional $cond \$$cond"
  done
  cond_string=$(echo "$cond_string" | cut -c 4-)
  eval $cond_string
}

configure() {
  cat $1 | replace_vars | sed 's/^    //' | set_conditionals | clean
}


# Vaccines

configure $vaccine_src > vaccine.js


# Server

cat $standalone_server_src | replace_vars | clean > dev_server_standalone_node.js


# Builds

configure $build_src > build
chmod +x build
