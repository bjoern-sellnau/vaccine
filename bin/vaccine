#!/bin/sh

help() {
  echo 'vaccine
        --inject [file]   # Inject vaccine into an existing file
        --app [app]       # Your app or lib name
        --main [path]     # The main script for your app (path from root)
        --lib [dir]       # The directory for your libraries (dependencies)
        --global [name]   # The global variable for the file being injected
        --output [file]   # The name of your built app (e. g. app.js)
        --size [dir]      # Calculate sizes. dir is your source directory.

Examples:
  vaccine --app datazooka --main src/index.js --lib lib
  vaccine --size src
  vaccine --inject d3.js
'
}

if test "X$vaccine_bin_dir" = X
then
  SOURCE="$0"
  DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do
    SOURCE="$(readlink "$SOURCE")"
    [ "$(echo "$SOURCE" | cut -c 1)" != '/' ] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  vaccine_bin_dir=$DIR
  vaccine_src_dir="$(cd "$DIR/../src" && pwd)"
  export vaccine_bin_dir
  export vaccine_src_dir
fi

vaccine_src=$vaccine_src_dir/vaccine.js
standalone_server_src=$vaccine_src_dir/dev_server_standalone.js
express_server_src=$vaccine_src_dir/dev_server_express.js
node_wrap_src=$vaccine_src_dir/dev_server_node_wrap.js
build_src=$vaccine_src_dir/build
build_node_src=$vaccine_src_dir/build_node

# Variables
app_name=
app_main=src/index
output_file=
library_dir=lib
build_script=./build
vaccine_path=vaccine.js    # The path to vaccine.js relative to build_node

vars_list='app_name app_main app_main_module output_file source_dir library_dir build_script vaccine_path'


fail() {
  echo $1 >&2
  exit 1
}

while test $# -gt 0
do
  case $1 in
    --help | -h)
      shift
      help
      exit 0
      ;;
    --app | -a)
      shift
      app_name=$1
      ;;
    --main | -m)
      shift
      app_main=$1
      ;;
    --output)
      shift
      output_file=$1
      ;;
    --lib)
      shift
      library_dir=$1
      ;;
    --build)
      shift
      build_script=$1
      ;;
    --size | -s)
      shift
      size_dir_or_file=$1
      test "X$size_dir_or_file" = X && fail 'Must provide source directory or file'
      ;;
    --inject | -i)
      shift
      inject_file=$1
      ;;
    --global)
      shift
      global_var=$1
      ;;
    --size-built)
      shift
      $vaccine_bin_dir/size.sh $@
      exit 0
      ;;
    *)
      fail "Unrecognized option: $1"
      ;;
  esac

  shift
done

if test "X$inject_file" != X -o "X$size_dir_or_file" != X
then
  if test "X$inject_file" != X
  then
    file=$inject_file
  else
    file=$size_dir_or_file
  fi
  derived_app_name=$(echo "$file" | sed -e 's#.*/##' -e 's/\..*$//')
  if test "X$app_name" = X
  then
    app_name=$derived_app_name
  fi
  if test "X$global_var" = X
  then
    global_var=$app_name
  fi
fi

if test "X$size_dir_or_file" != X
then
  $vaccine_bin_dir/size_test.sh "$size_dir_or_file" "$app_name" "$global_var"
  exit 0
fi

if test "X$inject_file" = X
then
  test "X$app_name" = X && fail 'Must provide the name of app (option --app)'

  test "X$output_file" = X && output_file=$app_name.js

  app_main=$(echo $app_main | sed 's/\.js$//')

  app_main_module=$(echo $app_main | sed 's#.*/##')

  source_dir=$(echo $app_main | sed 's#/[^/]*$##')
  test "X$source_dir" = "X$app_main" && source_dir=.
fi


unindent() {
  sed 's/^  //'
}

remove_sections() {
  sed "/### $1 START ###/,/>>> $1 END >>>/d"
}

choose_section() {
  sed -e "1,/### $1 START ###/d" -e "/>>> $1 END >>>/,\$d"
}

insert_section() {
  file=$2
  sed -e "/--- $1 INSERT ---/r $file" -e "/--- $1 INSERT ---/d"
}

replace_vars() {
  sed_string=''
  for var in $vars_list
  do
    eval value=\$$var
    name=$(echo $var | tr '[a-z]' '[A-Z]')
    sed_string="$sed_string -e 's#{{{ $name }}}#$value#'"
  done
  eval sed $sed_string
}

start() {
  cat $1 | replace_vars
}

clean() {
  sed -e '/### .* START ###/d' -e '/>>> .* END >>>/d' -e '/--- .* INSERT ---/d'
}

vaccine_intermediate() {
  start $vaccine_src | remove_sections LOADER | unindent
}

ordered_intermediate() {
  vaccine_intermediate | remove_sections OUT_OF_ORDER
}

vaccine_minimal() {
  vaccine_intermediate | choose_section MINIMAL |
      unindent | clean
}

inject_vaccine() {
  vaccine_minimal | sed '$d' | sed "\$s#;#).s('$app_name', $global_var);#" |
      sed '1s/^/(/'
}

if test "X$inject_file" != X
then
  if grep -q "window\.vaccine *=" $inject_file
  then
    echo 'vaccine already found'
  else
    inject_vaccine >> $inject_file
  fi
  exit 0
fi


test -d vaccines || mkdir vaccines
cd vaccines

start $vaccine_src | clean > vaccine_loader.js
vaccine_intermediate | clean > vaccine.js
ordered_intermediate | clean > vaccine_already_ordered.js
vaccine_minimal > vaccine_minimal.js
ordered_intermediate | remove_sections RELATIVE |
    clean > vaccine_absolute_require_already_ordered.js
vaccine_intermediate | remove_sections RELATIVE |
    clean > vaccine_absolute_require.js

insert_node_wrap() {
  insert_section NODE_WRAP $node_wrap_src
}

start $express_server_src | remove_sections NODE | clean > dev_server_express.js
start $express_server_src | insert_node_wrap | clean > dev_server_express_node.js
start $standalone_server_src | remove_sections NODE | clean > dev_server_standalone.js
start $standalone_server_src | insert_node_wrap | clean > dev_server_standalone_node.js

start $build_src > build
chmod +x build

start $build_node_src > build_node
chmod +x build_node

