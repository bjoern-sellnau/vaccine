#!/bin/sh

help() {
  echo 'vaccine <verb> <verb-argument> [options]

Verbs: (Can be shortened if unambiguous)
        configure <app>   # Build vaccines configured for app name.
        convert <app>     # Convert app to vaccine format, relative requires, etc.
        inject <file>     # Inject vaccine into an existing file.
        size <file/dir>   # Calculate sizes for sources in dir, or for file.
        built-size <file> [compare]  # Compute file sizes for .min, .gz versions.

Options:
        --app <app>       # Your app or lib name.
        --src <dir>       # The directory for your sources (default: src).
        --lib <dir>       # The directory for your libraries (default: lib).
        --global <name>   # The global variable for the file being injected.
                          # (default: app name)
        --to <type>       # Conversion types: vaccine, relative, absolute.
        --globals-list <file>
                          # List of globals when converting to vaccine.
        --sources-list <file>
                          # List of sources that need to be converted
        --write-exports   # Convert globals to exports [dangerous]

Examples:
  vaccine configure datazooka --src src --lib lib   # src and lib are defaults
  vaccine size src --app datazooka
  vaccine inject underscore.js --global _
  vaccine convert crossfilter --to relative
'
}

if test "X$vaccine_bin_dir" = X
then
  SOURCE="$0"
  DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do
    SOURCE="$(readlink "$SOURCE")"
    [ "$(echo "$SOURCE" | cut -c 1)" != '/' ] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

  vaccine_bin_dir=$DIR
  vaccine_src_dir="$(cd "$DIR/../src" && pwd)"
  export vaccine_bin_dir
  export vaccine_src_dir
fi

vaccine_src=$vaccine_src_dir/vaccine.js
standalone_server_src=$vaccine_src_dir/dev_server_standalone.js
express_server_src=$vaccine_src_dir/dev_server_express.js
node_wrap_src=$vaccine_src_dir/dev_server_node_wrap.js
common_server_src=$vaccine_src_dir/dev_server_common.js
build_src=$vaccine_src_dir/build
build_node_src=$vaccine_src_dir/build_node

# Variables
app_name=
global_var=
source_dir=src
library_dir=lib

vars_list='app_name source_dir library_dir global_var'


fail() {
  echo $1 >&2
  exit 1
}

case $1 in
  --help | -h)
    help
    exit 0
    ;;
  conv | conve | conver | convert)
    command=convert
    ;;
  conf | confi | config | configu | configur | configure)
    command=configure
    ;;
  s | si | siz | size)
    command=size
    ;;
  i | in | inj | inje | injec | inject)
    command=inject
    ;;
  b | bu | bui | buil | built | built- | built-s | built-si | built-siz | built-size)
    command=built-size
    ;;
  *)
    fail "Unrecognized command: $1"
    ;;
esac

shift

if test $command = built-size
then
  $vaccine_bin_dir/size.sh $@
  exit $?
fi

if ! $(echo "$1" | grep -q "^-")
then
  argument=$1
  shift
fi

if test "X$argument" != X
then
  case $command in
    configure) app_name=$argument ;;
    convert) app_name=$argument ;;
    inject) dir_or_file=$argument ;;
    size) dir_or_file=$argument ;;
  esac
fi


while test $# -gt 0
do
  case $1 in
    --app) app_name=$2 ;;
    --src) dir_or_file=$2; source_dir=$2 ;;
    --lib) library_dir=$2 ;;
    --global) global_var=$2 ;;
    --globals-list) globals_list=$2 ;;
    --sources-list) sources_list=$2 ;;
    --write-exports) write_exports=true ;;
    --to) convert_to=$2 ;;
    *) fail "Unrecognized option: $1" ;;
  esac
  if test "X$1" = "X--write-exports"
  then
    shift 1
  else
    shift 2
  fi
done

if test $command = size -o $command = inject
then
  if test "X$app_name" = X
  then
    app_name=$(echo "$dir_or_file" | sed -e 's#.*/##' -e 's/\..*$//')
  fi
fi

if test "X$global_var" = X
then
  global_var=$app_name
fi

if test $command = size
then
  $vaccine_bin_dir/size_test.sh "$dir_or_file" "$app_name" "$global_var"
  exit $?
fi

if test $command = convert
then
  case $convert_to in
    relative | absolute)
      $vaccine_bin_dir/convert_requires.sh "$convert_to" \
                                           "$app_name" "$source_dir"
      ;;
    vaccine)
      $vaccine_bin_dir/convert.sh "$app_name" "$global_var" "$source_dir" \
                                  "$globals_list" "$sources_list" "$write_exports"
      ;;
    *)
      fail "Unrecognized convert to type (--to): $convert_to"
      ;;
  esac
  exit $?
fi

if test $command = configure
then
  test "X$app_name" = X && fail 'Must provide the name of app (vaccine configure app)'
fi


unindent() {
  sed 's/^  //'
}

remove_sections() {
  sed "/### $1 START ###/,/>>> $1 END >>>/d"
}

choose_section() {
  sed -e "1,/### $1 START ###/d" -e "/>>> $1 END >>>/,\$d"
}

insert_section() {
  file=$2
  sed -e "/--- $1 INSERT ---/r $file" -e "/--- $1 INSERT ---/d"
}

replace_vars() {
  sed_string=''
  for var in $vars_list
  do
    eval value=\$$var
    name=$(echo $var | tr '[a-z]' '[A-Z]')
    sed_string="$sed_string -e 's#{{{ $name }}}#$value#'"
  done
  eval sed $sed_string
}

start() {
  cat $1 | replace_vars
}

clean() {
  sed -e '/### .* START ###/d' -e '/>>> .* END >>>/d' -e '/--- .* INSERT ---/d'
}

vaccine_intermediate() {
  start $vaccine_src | remove_sections LOADER | unindent
}

ordered_intermediate() {
  vaccine_intermediate | remove_sections OUT_OF_ORDER
}

vaccine_minimal() {
  vaccine_intermediate | choose_section MINIMAL |
      unindent | clean
}

relative() {
  remove_sections SIMPLE_RELATIVE
}

simplify() {
  remove_sections RELATIVE | remove_sections INDEX
}

inject_vaccine() {
  vaccine_minimal | sed '$d' | sed "\$s#;#).s('$app_name', $global_var);#" |
      sed '1s/^/(/'
}

if test $command = inject
then
  if grep -q "window\.vaccine *=" "$dir_or_file"
  then
    echo 'vaccine already found'
  else
    inject_vaccine >> "$dir_or_file"
  fi
  exit $?
fi


test -d vaccines || mkdir vaccines
cd vaccines

# Vaccines

start $vaccine_src | relative | clean > vaccine_loader.js
vaccine_intermediate | relative | clean > vaccine.js
ordered_intermediate | relative | clean > vaccine_ordered.js
ordered_intermediate | simplify |
    clean > vaccine_simple.js
vaccine_minimal > vaccine_minimal.js


# Servers

start_server() {
  start $1 | insert_section COMMON $common_server_src
}

insert_node_wrap() {
  insert_section NODE_WRAP $node_wrap_src
}

start_server $express_server_src | remove_sections STANDALONE |
    remove_sections NODE | clean > dev_server_express.js
start_server $express_server_src | remove_sections STANDALONE |
    insert_node_wrap | clean > dev_server_express_node.js
start_server $standalone_server_src | remove_sections NODE |
    clean > dev_server_standalone.js
start_server $standalone_server_src | insert_node_wrap |
    clean > dev_server_standalone_node.js


# Builds

start $build_src > build
chmod +x build

start $build_node_src | remove_sections RENAME_MAIN > build_node
chmod +x build_node

start $build_node_src | clean > build_node_simple
chmod +x build_node_simple

